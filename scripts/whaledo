#!/usr/bin/env python

# ;~; *sad dog noises*


# whaledo [-h|--help|--version]
# whaledo alias SHORTNAME=LONGNAME # Alias SHORTNAME to the Docker Hub image LONGNAME.
# whaledo unalias SHORTNAME        # Unalias SHORTNAME.
# whaledo LONGNAME COMMAND         # Run command in the Docker image referenced by LONGNAME
# whaledo SHORTNAME COMMAND        # Run COMMAND in the Docker image referenced by the LONGNAME that SHORTNAME is aliased to.
#
# TODO: Figure out how to handle volumes and such.
# NOTE: I am going to be making a repo of Dockerfiles specifically for this, so I am okay using some kind of convention for mounting things instead of making it infinitely tweakable.
#       E.g., always mounting . to /tmp/work or $HOME to /tmp/home or something like that, or doing `whaledo [SHORTNAME|LONGNAME] COMMAND [MOUNTPOINTS...]` and just doing a 1:1 mapping.
#       An alternative approach could be to get metadata files from the whaledo-containers GitHub repo that explain what should be mounted where, but use the containers from Docker Hub just to make it quicker/less annoying.
#
# Example usage:
# $ whaledo alias rgdev=duckinator/rubygems-development
# $ whaledo rgdev rake test # Run `rake test` in a Docker container using the duckinator/rubygems-development image.
# $ whaledo unalias rgdev

# All of the code is garbage.


import sys

#def cmd_help(args):
#    ...
#
#def cmd_alias(args):
#    ...
#
#def cmd_unalias(args):
#    ...
#
#def cmd_run(args):
#    ...
#
#
#def dispatch(args):
#    if len(args) == 1:
#        args[1] = "--help"
#
#    commands = {
#        '-h':       cmd_help,
#        '--help':   cmd_help,
#        'alias':    cmd_alias,
#        'unalias':  cmd_unalias, 
#    }
#
#    cmd_args = args[2:]
#    if args[1] in command:
#        commands[args[1]](cmd_args)
#    else:
#        cmd_run(cmd_args)


import argparse
import re

def alias_map(value):
    pattern =  re.compile("[A-Za-z0-9]=[A-Za-z0-9]")
    if pattern.match(value):
        return value
    raise argparse.ArgumentTypeError("{:s} is invalid, must be in the form of SHORTNAME=LONGNAME".format(value))

mainparser = argparse.ArgumentParser(description="Woof")
mainparser.add_argument("command", choices=['alias', 'unalias', 'woof'], help="Command to run")
(args, remainder) = mainparser.parse_known_args(sys.argv[1:])

if args.command == 'alias':
    aliasparser = argparse.ArgumentParser(description="alias args")
    aliasparser.add_argument("aliasmap", type=alias_map, help="Command to alias in the form of SHORTNAME=LONGNAME")
    args = aliasparser.parse_args(remainder)
    print("Found {}".format(args.aliasmap))

