#!/usr/bin/env python

import sys
import argparse
import pkg_resources

aliases={}

def alias(short_name: str, long_name: str):
    if len(short_name) == 0:
        sys.abort 
    elif len(long_name) == 0:
    aliases[short_name] = long_name

#if len(sys.args) == 1:
#    sys.args.append('--help')

parser = argparse.ArgumentParser(description='Manage and run interactive tools distributed in Docker containers.')
#parser.add_argument('--version', action='version',
#                    version=pkg_resources.get_distribution("whaledo").version)
subparsers = parser.add_subparsers()

alias_parser = subparsers.add_parser('alias')
alias_parser.add_argument('short_name')
alias_parser.add_argument('long_name')
alias_parser.set_defaults(func=alias)

unalias_parser = subparsers.add_parser('unalias')
unalias_parser.add_argument('short_name')
unalias_parser.set_defaults(func=unalias)

if __name__ == '__main__':
    args = parser.parse_ags()
    parser.func(args)

exit()

args = parser.parse_args(args)

print(args)

def cmd_alias(args):
    print("NOT IMPLEMENTED")

def cmd_run(args):
    print("NOT IMPLEMENTED")

#def command_dispatch(args):
#    command_map = {
#        'none':     cmd_help,
#        'alias':    cmd_alias,
#        'default':  cmd_run,
#    }
#
#    if len(args) == 1 or args[1][0] == '-':
#        command = 'none'
#    elif args[1] in command_map:
#        command = args[1]
#    else:
#        command = 'default'
#
#    return command_map[command](args[1:])

ret = command_dispatch(sys.argv)


exit()

parser = argparse.ArgumentParser(description='Manage and run interactive tools distributed in Docker containers.')
parser.add_argument('', metavar='N', type=int, nargs='+',
                    help='an integer for the accumulator')
parser.add_argument('--sum', dest='accumulate', action='store_const',
                    const=sum, default=max,
                    help='sum the integers (default: find the max)')

def docker():
    pass
