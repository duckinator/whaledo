#!/usr/bin/env python

# ;~; *sad dog noises*


# whaledo [-h|--help|--version]
# whaledo alias SHORTNAME=LONGNAME # Alias SHORTNAME to the Docker Hub image LONGNAME.
# whaledo unalias SHORTNAME        # Unalias SHORTNAME.
# whaledo LONGNAME COMMAND         # Run command in the Docker image referenced by LONGNAME
# whaledo SHORTNAME COMMAND        # Run COMMAND in the Docker image referenced by the LONGNAME that SHORTNAME is aliased to.
#
# TODO: Figure out how to handle volumes and such.
# NOTE: I am going to be making a repo of Dockerfiles specifically for this, so I am okay using some kind of convention for mounting things instead of making it infinitely tweakable.
#       E.g., always mounting . to /tmp/work or $HOME to /tmp/home or something like that, or doing `whaledo [SHORTNAME|LONGNAME] COMMAND [MOUNTPOINTS...]` and just doing a 1:1 mapping.
#       An alternative approach could be to get metadata files from the whaledo-containers GitHub repo that explain what should be mounted where, but use the containers from Docker Hub just to make it quicker/less annoying.
#
# Example usage:
# $ whaledo alias rgdev=duckinator/rubygems-development
# $ whaledo rgdev rake test # Run `rake test` in a Docker container using the duckinator/rubygems-development image.
# $ whaledo unalias rgdev

import re
import click

@click.group()
def cli():
    pass

@click.command()
@click.argument("short_name")
@click.argument("long_name")
def alias(short_name, long_name):
    print("Alias: {}={}".format(short_name, long_name))

@click.command()
@click.argument("short_name")
def unalias(short_name):
    print("Unalias: {}".format(short_name))

cli.add_command(alias)
cli.add_command(unalias)

if __name__ == '__main__':
    cli()
