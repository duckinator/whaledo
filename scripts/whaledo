#!/usr/bin/env python

# ;~; *sad dog noises*


# whaledo [-h|--help|--version]
# whaledo alias SHORTNAME=LONGNAME # Alias SHORTNAME to the Docker Hub image LONGNAME.
# whaledo unalias SHORTNAME        # Unalias SHORTNAME.
# whaledo LONGNAME COMMAND         # Run command in the Docker image referenced by LONGNAME
# whaledo SHORTNAME COMMAND        # Run COMMAND in the Docker image referenced by the LONGNAME that SHORTNAME is aliased to.
#
# TODO: Figure out how to handle volumes and such.
# NOTE: I am going to be making a repo of Dockerfiles specifically for this, so I am okay using some kind of convention for mounting things instead of making it infinitely tweakable.
#       E.g., always mounting . to /tmp/work or $HOME to /tmp/home or something like that, or doing `whaledo [SHORTNAME|LONGNAME] COMMAND [MOUNTPOINTS...]` and just doing a 1:1 mapping.
#       An alternative approach could be to get metadata files from the whaledo-containers GitHub repo that explain what should be mounted where, but use the containers from Docker Hub just to make it quicker/less annoying.
#
# Example usage:
# $ whaledo alias rgdev=duckinator/rubygems-development
# $ whaledo rgdev rake test # Run `rake test` in a Docker container using the duckinator/rubygems-development image.
# $ whaledo unalias rgdev

import os
import json
import click

class whaledo_cli:
    def __init__(self, filename):
        self.aliases = {}
        aliases = self.load_aliases(alias_file)
        try:
            self.cli()
        finally:
            print("??????")
            self.save_aliases(alias_file)

    def load_aliases(self, filename):
        print("Loading aliases.")
        if os.path.isfile(filename) and os.stat(filename).st_size != 0:
            print("???")
            with open(filename, 'r') as f:
                json.load(f)

    def save_aliases(self, filename):
        print("Saving aliases.")
        with open(filename, 'w') as f:
            json.dump(self.aliases, f)

    @click.group()
    def cli(self):
        print("meep")
        pass

    @cli.command()
    @click.argument("short_name")
    @click.argument("long_name")
    def alias(self, short_name, long_name):
        self.aliases[short_name] = long_name
        print("Alias: {}={}".format(short_name, long_name))

    @cli.command()
    @click.argument("short_name")
    def unalias(self, short_name):
        print("Unalias: {}".format(short_name))

    cli.add_command(alias)
    cli.add_command(unalias)

if __name__ == '__main__':
    alias_file = os.path.join(os.environ['HOME'], '.whaledo_aliases.json')
    whaledo_cli(alias_file)
